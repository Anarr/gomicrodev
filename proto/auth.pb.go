// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/auth.proto

package auth

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AuthRequest struct {
	Email                string   `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthRequest) Reset()         { *m = AuthRequest{} }
func (m *AuthRequest) String() string { return proto.CompactTextString(m) }
func (*AuthRequest) ProtoMessage()    {}
func (*AuthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9d38a2cdbb4f144, []int{0}
}

func (m *AuthRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthRequest.Unmarshal(m, b)
}
func (m *AuthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthRequest.Marshal(b, m, deterministic)
}
func (m *AuthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthRequest.Merge(m, src)
}
func (m *AuthRequest) XXX_Size() int {
	return xxx_messageInfo_AuthRequest.Size(m)
}
func (m *AuthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthRequest proto.InternalMessageInfo

func (m *AuthRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AuthRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type AuthResponse struct {
	IsLoggedIn           bool     `protobuf:"varint,1,opt,name=is_logged_in,json=isLoggedIn,proto3" json:"is_logged_in,omitempty"`
	SessionId            string   `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthResponse) Reset()         { *m = AuthResponse{} }
func (m *AuthResponse) String() string { return proto.CompactTextString(m) }
func (*AuthResponse) ProtoMessage()    {}
func (*AuthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9d38a2cdbb4f144, []int{1}
}

func (m *AuthResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthResponse.Unmarshal(m, b)
}
func (m *AuthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthResponse.Marshal(b, m, deterministic)
}
func (m *AuthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthResponse.Merge(m, src)
}
func (m *AuthResponse) XXX_Size() int {
	return xxx_messageInfo_AuthResponse.Size(m)
}
func (m *AuthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AuthResponse proto.InternalMessageInfo

func (m *AuthResponse) GetIsLoggedIn() bool {
	if m != nil {
		return m.IsLoggedIn
	}
	return false
}

func (m *AuthResponse) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func init() {
	proto.RegisterType((*AuthRequest)(nil), "AuthRequest")
	proto.RegisterType((*AuthResponse)(nil), "AuthResponse")
}

func init() {
	proto.RegisterFile("proto/auth.proto", fileDescriptor_a9d38a2cdbb4f144)
}

var fileDescriptor_a9d38a2cdbb4f144 = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0x2c, 0x2d, 0xc9, 0xd0, 0x03, 0x33, 0x95, 0xec, 0xb9, 0xb8, 0x1d, 0x4b, 0x4b,
	0x32, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x44, 0xb8, 0x58, 0x53, 0x73, 0x13, 0x33,
	0x73, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x20, 0x1c, 0x21, 0x29, 0x2e, 0x8e, 0x82, 0xc4,
	0xe2, 0xe2, 0xf2, 0xfc, 0xa2, 0x14, 0x09, 0x26, 0xb0, 0x04, 0x9c, 0xaf, 0xe4, 0xcf, 0xc5, 0x03,
	0x31, 0xa0, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x48, 0x81, 0x8b, 0x27, 0xb3, 0x38, 0x3e, 0x27,
	0x3f, 0x3d, 0x3d, 0x35, 0x25, 0x3e, 0x33, 0x0f, 0x6c, 0x10, 0x47, 0x10, 0x57, 0x66, 0xb1, 0x0f,
	0x58, 0xc8, 0x33, 0x4f, 0x48, 0x96, 0x8b, 0xab, 0x38, 0xb5, 0xb8, 0x38, 0x33, 0x3f, 0x2f, 0x3e,
	0x13, 0x66, 0x1e, 0x27, 0x54, 0xc4, 0x33, 0xc5, 0xc8, 0x18, 0xe2, 0xa2, 0xe0, 0xd4, 0xa2, 0xb2,
	0xcc, 0xe4, 0x54, 0x21, 0x15, 0x2e, 0x56, 0x9f, 0xfc, 0xf4, 0xcc, 0x3c, 0x21, 0x1e, 0x3d, 0x24,
	0x87, 0x4a, 0xf1, 0xea, 0x21, 0xdb, 0x9a, 0xc4, 0x06, 0xf6, 0x8d, 0x31, 0x20, 0x00, 0x00, 0xff,
	0xff, 0x82, 0xa7, 0xd9, 0xdf, 0xe1, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AuthService service

type AuthServiceClient interface {
	Login(ctx context.Context, in *AuthRequest, opts ...client.CallOption) (*AuthResponse, error)
}

type authServiceClient struct {
	c           client.Client
	serviceName string
}

func NewAuthServiceClient(serviceName string, c client.Client) AuthServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "authservice"
	}
	return &authServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *authServiceClient) Login(ctx context.Context, in *AuthRequest, opts ...client.CallOption) (*AuthResponse, error) {
	req := c.c.NewRequest(c.serviceName, "AuthService.Login", in)
	out := new(AuthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthService service

type AuthServiceHandler interface {
	Login(context.Context, *AuthRequest, *AuthResponse) error
}

func RegisterAuthServiceHandler(s server.Server, hdlr AuthServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&AuthService{hdlr}, opts...))
}

type AuthService struct {
	AuthServiceHandler
}

func (h *AuthService) Login(ctx context.Context, in *AuthRequest, out *AuthResponse) error {
	return h.AuthServiceHandler.Login(ctx, in, out)
}
